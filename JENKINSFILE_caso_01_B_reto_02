pipeline {
    agent none
    
    stages {
        stage('Get Code') {
            agent any
            steps {
                echo WORKSPACE
                bat '''
        		    whoami
        		    hostname
        		'''
                git branch: 'develop', url: 'https://github.com/aezum19c/casoprueba01.git'
                stash allowEmpty: true, includes: 'app\\**,test\\**', name: 'getcode'
            }
        }
        
        stage('Static and Coverage') {
            parallel {
                stage('Static'){
                    agent { 
                        label 'win-server-01'
                    }
                    steps {
                        echo WORKSPACE
                	    bat '''
                		    whoami
                		    hostname
                		    flake8 --exit-zero --format=pylint app > flake8.out
                		'''
                		recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates:[[threshold: 10, type: 'TOTAL', unstable: true],[threshold: 12, type: 'TOTAL', unstable: false]]
                	}
                }
                stage('Coverage') {
                    agent { 
                        label 'win-server-02'
                    }
                    steps {
                        unstash 'getcode'
                        echo WORKSPACE
                	    bat '''
                		    whoami
                		    hostname
                            set PYTHONPATH=%WORKSPACE%
                            coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest --junitxml=result-unit.xml test\\unit
                            coverage xml
                        '''
                        junit 'result*.xml'
                        cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,70,80', lineCoverageTargets:'100,80,95', failUnstable: false
                    }
                }
            }
        }
        
        stage('Security & Performance'){
            parallel {
                stage('Security') {
                    agent { 
                        label 'win-server-01'
                    }
                    steps {
                	    echo WORKSPACE
                	    bat '''
                		    whoami
                		    hostname
                			bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                		'''
                		recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates:[[threshold:1, type: 'TOTAL', unstable: true],[threshold: 2, type: 'TOTAL', unstable: false]]
                	}
                }
                
                stage('Performance') {
                    agent { 
                        label 'win-server-02'
                    }
                    steps {
                	    echo WORKSPACE
                	    bat '''
                		    whoami
                		    hostname
                	        set FLASK_APP=app\\api.py
                	        start flask run
                			D:\\Instaladores\\apache-jmeter-5.5\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl
                		'''
                		perfReport sourceDataFiles: 'flask.jtl'
                	}
                }
            }
        }
    }
}